create table "public"."user_plan" (
    "id" bigint generated by default as identity not null,
    "plan" bigint not null,
    "user" uuid not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."user_plan" enable row level security;

CREATE UNIQUE INDEX user_plan_pkey ON public.user_plan USING btree (id);

CREATE UNIQUE INDEX user_plan_user_key ON public.user_plan USING btree ("user");

alter table "public"."user_plan" add constraint "user_plan_pkey" PRIMARY KEY using index "user_plan_pkey";

alter table "public"."user_plan" add constraint "user_plan_plan_fkey" FOREIGN KEY (plan) REFERENCES plan(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_plan" validate constraint "user_plan_plan_fkey";

alter table "public"."user_plan" add constraint "user_plan_user_fkey" FOREIGN KEY ("user") REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_plan" validate constraint "user_plan_user_fkey";

alter table "public"."user_plan" add constraint "user_plan_user_key" UNIQUE using index "user_plan_user_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.insert_default_plan_for_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Insert a new row into the user_plan table
  INSERT INTO user_plan ("user", plan)
  VALUES (NEW.id, 19); -- Default plan ID (19)

  RETURN NEW;
END;
$function$
;

grant delete on table "public"."user_plan" to "anon";

grant insert on table "public"."user_plan" to "anon";

grant references on table "public"."user_plan" to "anon";

grant select on table "public"."user_plan" to "anon";

grant trigger on table "public"."user_plan" to "anon";

grant truncate on table "public"."user_plan" to "anon";

grant update on table "public"."user_plan" to "anon";

grant delete on table "public"."user_plan" to "authenticated";

grant insert on table "public"."user_plan" to "authenticated";

grant references on table "public"."user_plan" to "authenticated";

grant select on table "public"."user_plan" to "authenticated";

grant trigger on table "public"."user_plan" to "authenticated";

grant truncate on table "public"."user_plan" to "authenticated";

grant update on table "public"."user_plan" to "authenticated";

grant delete on table "public"."user_plan" to "service_role";

grant insert on table "public"."user_plan" to "service_role";

grant references on table "public"."user_plan" to "service_role";

grant select on table "public"."user_plan" to "service_role";

grant trigger on table "public"."user_plan" to "service_role";

grant truncate on table "public"."user_plan" to "service_role";

grant update on table "public"."user_plan" to "service_role";

create policy "Enable Insert for own user"
on "public"."user_plan"
as permissive
for insert
to authenticated
with check (("user" = auth.uid()));


create policy "Enable Update for own user"
on "public"."user_plan"
as permissive
for update
to authenticated
using (("user" = auth.uid()))
with check (("user" = auth.uid()));


create policy "Enable read access for own users"
on "public"."user_plan"
as permissive
for select
to public
using (("user" = auth.uid()));


CREATE TRIGGER after_user_insert AFTER INSERT ON public."user" FOR EACH ROW EXECUTE FUNCTION insert_default_plan_for_new_user();


