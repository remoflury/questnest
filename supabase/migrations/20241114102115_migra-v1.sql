create table "public"."group" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."group" enable row level security;

create table "public"."quest" (
    "id" bigint generated by default as identity not null,
    "questboard" bigint not null,
    "text" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."quest" enable row level security;

create table "public"."quest_done" (
    "id" bigint generated by default as identity not null,
    "quest" bigint not null,
    "user" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."quest_done" enable row level security;

create table "public"."questboard" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "description" text,
    "group" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."questboard" enable row level security;

create table "public"."user" (
    "id" uuid not null default auth.uid(),
    "username" text not null,
    "email" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."user" enable row level security;

create table "public"."user_group" (
    "id" bigint generated by default as identity not null,
    "user" uuid not null,
    "group" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."user_group" enable row level security;

CREATE UNIQUE INDEX group_pkey ON public."group" USING btree (id);

CREATE UNIQUE INDEX quest_done_pkey ON public.quest_done USING btree (id);

CREATE UNIQUE INDEX quest_pkey ON public.quest USING btree (id);

CREATE UNIQUE INDEX questboard_pkey ON public.questboard USING btree (id);

CREATE UNIQUE INDEX unique_user_group ON public.user_group USING btree ("user", "group");

CREATE UNIQUE INDEX user_group_pkey ON public.user_group USING btree (id);

CREATE UNIQUE INDEX user_pkey ON public."user" USING btree (id);

alter table "public"."group" add constraint "group_pkey" PRIMARY KEY using index "group_pkey";

alter table "public"."quest" add constraint "quest_pkey" PRIMARY KEY using index "quest_pkey";

alter table "public"."quest_done" add constraint "quest_done_pkey" PRIMARY KEY using index "quest_done_pkey";

alter table "public"."questboard" add constraint "questboard_pkey" PRIMARY KEY using index "questboard_pkey";

alter table "public"."user" add constraint "user_pkey" PRIMARY KEY using index "user_pkey";

alter table "public"."user_group" add constraint "user_group_pkey" PRIMARY KEY using index "user_group_pkey";

alter table "public"."quest" add constraint "quest_questboard_fkey" FOREIGN KEY (questboard) REFERENCES questboard(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."quest" validate constraint "quest_questboard_fkey";

alter table "public"."quest_done" add constraint "quest_done_quest_fkey" FOREIGN KEY (quest) REFERENCES quest(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."quest_done" validate constraint "quest_done_quest_fkey";

alter table "public"."quest_done" add constraint "quest_done_user_fkey" FOREIGN KEY ("user") REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."quest_done" validate constraint "quest_done_user_fkey";

alter table "public"."questboard" add constraint "questboard_group_fkey" FOREIGN KEY ("group") REFERENCES "group"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."questboard" validate constraint "questboard_group_fkey";

alter table "public"."user" add constraint "user_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user" validate constraint "user_id_fkey";

alter table "public"."user_group" add constraint "unique_user_group" UNIQUE using index "unique_user_group";

alter table "public"."user_group" add constraint "user_group_group_fkey" FOREIGN KEY ("group") REFERENCES "group"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_group" validate constraint "user_group_group_fkey";

alter table "public"."user_group" add constraint "user_group_user_fkey" FOREIGN KEY ("user") REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_group" validate constraint "user_group_user_fkey";

alter table "public"."user_group" add constraint "user_group_user_fkey1" FOREIGN KEY ("user") REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_group" validate constraint "user_group_user_fkey1";

alter table "public"."user_group" add constraint "user_group_user_fkey2" FOREIGN KEY ("user") REFERENCES "user"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_group" validate constraint "user_group_user_fkey2";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.add_creator_to_user_group()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    user_id uuid;
BEGIN
    -- Get the ID of the currently authenticated user
    user_id := auth.uid();

    -- Insert a new entry into user_group with the current user and the new group
    INSERT INTO user_group ("user", "group")
    VALUES (user_id, NEW.id);

    RETURN NEW;
END;
$function$
;

create or replace view "public"."user_accessible_groups" as  SELECT user_group."group"
   FROM user_group
  WHERE (user_group."user" = auth.uid());


create or replace view "public"."user_accessible_quests" as  SELECT quest_done.id AS quest_done_id,
    quest_done."user" AS user_id,
    quest_done.quest AS quest_id,
    user_group."user" AS member_user_id
   FROM ((((quest_done
     JOIN quest ON ((quest_done.quest = quest.id)))
     JOIN questboard ON ((quest.questboard = questboard.id)))
     JOIN "group" ON ((questboard."group" = "group".id)))
     JOIN user_group ON ((user_group."group" = "group".id)));


grant delete on table "public"."group" to "anon";

grant insert on table "public"."group" to "anon";

grant references on table "public"."group" to "anon";

grant select on table "public"."group" to "anon";

grant trigger on table "public"."group" to "anon";

grant truncate on table "public"."group" to "anon";

grant update on table "public"."group" to "anon";

grant delete on table "public"."group" to "authenticated";

grant insert on table "public"."group" to "authenticated";

grant references on table "public"."group" to "authenticated";

grant select on table "public"."group" to "authenticated";

grant trigger on table "public"."group" to "authenticated";

grant truncate on table "public"."group" to "authenticated";

grant update on table "public"."group" to "authenticated";

grant delete on table "public"."group" to "service_role";

grant insert on table "public"."group" to "service_role";

grant references on table "public"."group" to "service_role";

grant select on table "public"."group" to "service_role";

grant trigger on table "public"."group" to "service_role";

grant truncate on table "public"."group" to "service_role";

grant update on table "public"."group" to "service_role";

grant delete on table "public"."quest" to "anon";

grant insert on table "public"."quest" to "anon";

grant references on table "public"."quest" to "anon";

grant select on table "public"."quest" to "anon";

grant trigger on table "public"."quest" to "anon";

grant truncate on table "public"."quest" to "anon";

grant update on table "public"."quest" to "anon";

grant delete on table "public"."quest" to "authenticated";

grant insert on table "public"."quest" to "authenticated";

grant references on table "public"."quest" to "authenticated";

grant select on table "public"."quest" to "authenticated";

grant trigger on table "public"."quest" to "authenticated";

grant truncate on table "public"."quest" to "authenticated";

grant update on table "public"."quest" to "authenticated";

grant delete on table "public"."quest" to "service_role";

grant insert on table "public"."quest" to "service_role";

grant references on table "public"."quest" to "service_role";

grant select on table "public"."quest" to "service_role";

grant trigger on table "public"."quest" to "service_role";

grant truncate on table "public"."quest" to "service_role";

grant update on table "public"."quest" to "service_role";

grant delete on table "public"."quest_done" to "anon";

grant insert on table "public"."quest_done" to "anon";

grant references on table "public"."quest_done" to "anon";

grant select on table "public"."quest_done" to "anon";

grant trigger on table "public"."quest_done" to "anon";

grant truncate on table "public"."quest_done" to "anon";

grant update on table "public"."quest_done" to "anon";

grant delete on table "public"."quest_done" to "authenticated";

grant insert on table "public"."quest_done" to "authenticated";

grant references on table "public"."quest_done" to "authenticated";

grant select on table "public"."quest_done" to "authenticated";

grant trigger on table "public"."quest_done" to "authenticated";

grant truncate on table "public"."quest_done" to "authenticated";

grant update on table "public"."quest_done" to "authenticated";

grant delete on table "public"."quest_done" to "service_role";

grant insert on table "public"."quest_done" to "service_role";

grant references on table "public"."quest_done" to "service_role";

grant select on table "public"."quest_done" to "service_role";

grant trigger on table "public"."quest_done" to "service_role";

grant truncate on table "public"."quest_done" to "service_role";

grant update on table "public"."quest_done" to "service_role";

grant delete on table "public"."questboard" to "anon";

grant insert on table "public"."questboard" to "anon";

grant references on table "public"."questboard" to "anon";

grant select on table "public"."questboard" to "anon";

grant trigger on table "public"."questboard" to "anon";

grant truncate on table "public"."questboard" to "anon";

grant update on table "public"."questboard" to "anon";

grant delete on table "public"."questboard" to "authenticated";

grant insert on table "public"."questboard" to "authenticated";

grant references on table "public"."questboard" to "authenticated";

grant select on table "public"."questboard" to "authenticated";

grant trigger on table "public"."questboard" to "authenticated";

grant truncate on table "public"."questboard" to "authenticated";

grant update on table "public"."questboard" to "authenticated";

grant delete on table "public"."questboard" to "service_role";

grant insert on table "public"."questboard" to "service_role";

grant references on table "public"."questboard" to "service_role";

grant select on table "public"."questboard" to "service_role";

grant trigger on table "public"."questboard" to "service_role";

grant truncate on table "public"."questboard" to "service_role";

grant update on table "public"."questboard" to "service_role";

grant delete on table "public"."user" to "anon";

grant insert on table "public"."user" to "anon";

grant references on table "public"."user" to "anon";

grant select on table "public"."user" to "anon";

grant trigger on table "public"."user" to "anon";

grant truncate on table "public"."user" to "anon";

grant update on table "public"."user" to "anon";

grant delete on table "public"."user" to "authenticated";

grant insert on table "public"."user" to "authenticated";

grant references on table "public"."user" to "authenticated";

grant select on table "public"."user" to "authenticated";

grant trigger on table "public"."user" to "authenticated";

grant truncate on table "public"."user" to "authenticated";

grant update on table "public"."user" to "authenticated";

grant delete on table "public"."user" to "service_role";

grant insert on table "public"."user" to "service_role";

grant references on table "public"."user" to "service_role";

grant select on table "public"."user" to "service_role";

grant trigger on table "public"."user" to "service_role";

grant truncate on table "public"."user" to "service_role";

grant update on table "public"."user" to "service_role";

grant delete on table "public"."user_group" to "anon";

grant insert on table "public"."user_group" to "anon";

grant references on table "public"."user_group" to "anon";

grant select on table "public"."user_group" to "anon";

grant trigger on table "public"."user_group" to "anon";

grant truncate on table "public"."user_group" to "anon";

grant update on table "public"."user_group" to "anon";

grant delete on table "public"."user_group" to "authenticated";

grant insert on table "public"."user_group" to "authenticated";

grant references on table "public"."user_group" to "authenticated";

grant select on table "public"."user_group" to "authenticated";

grant trigger on table "public"."user_group" to "authenticated";

grant truncate on table "public"."user_group" to "authenticated";

grant update on table "public"."user_group" to "authenticated";

grant delete on table "public"."user_group" to "service_role";

grant insert on table "public"."user_group" to "service_role";

grant references on table "public"."user_group" to "service_role";

grant select on table "public"."user_group" to "service_role";

grant trigger on table "public"."user_group" to "service_role";

grant truncate on table "public"."user_group" to "service_role";

grant update on table "public"."user_group" to "service_role";

create policy "Enable delete for users of group"
on "public"."group"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM user_group
  WHERE ((user_group."group" = "group".id) AND (user_group."user" = auth.uid())))));


create policy "Enable insert for authenticated users only"
on "public"."group"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for members of group"
on "public"."group"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM user_group
  WHERE ((user_group."group" = "group".id) AND (user_group."user" = auth.uid())))));


create policy "Enable insert for authenticated users only"
on "public"."quest"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access users of questboard"
on "public"."quest"
as permissive
for select
to public
using ((EXISTS ( SELECT 1
   FROM (user_group
     JOIN questboard ON ((questboard."group" = user_group."group")))
  WHERE ((user_group."user" = auth.uid()) AND (quest.questboard = questboard.id)))));


create policy "Enable update for users of questboard"
on "public"."quest"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM (user_group
     JOIN questboard ON ((questboard."group" = user_group."group")))
  WHERE ((user_group."user" = auth.uid()) AND (quest.questboard = questboard.id)))))
with check ((EXISTS ( SELECT 1
   FROM (user_group
     JOIN questboard ON ((questboard."group" = user_group."group")))
  WHERE ((user_group."user" = auth.uid()) AND (quest.questboard = questboard.id)))));


create policy "Enable delete for users based on user_id"
on "public"."quest_done"
as permissive
for delete
to public
using (("user" = auth.uid()));


create policy "Enable insert for authenticated users only"
on "public"."quest_done"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read for quests of own group"
on "public"."quest_done"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT 1
   FROM user_accessible_quests
  WHERE ((user_accessible_quests.quest_done_id = quest_done.id) AND (user_accessible_quests.member_user_id = auth.uid())))));


create policy "Enable insert for authenticated users only"
on "public"."questboard"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."questboard"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for all users"
on "public"."user"
as permissive
for insert
to public
with check (true);


create policy "Enable read access for authenticated users"
on "public"."user"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for own user"
on "public"."user"
as permissive
for update
to authenticated
using ((id = auth.uid()))
with check ((id = auth.uid()));


create policy "Enable delete for users in their own group"
on "public"."user_group"
as permissive
for delete
to authenticated
using ((EXISTS ( SELECT 1
   FROM user_group ug
  WHERE ((ug."group" = user_group."group") AND (ug."user" = auth.uid())))));


create policy "Enable insert for authenticated users only"
on "public"."user_group"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for users groups"
on "public"."user_group"
as permissive
for select
to authenticated
using (("group" IN ( SELECT user_accessible_groups."group"
   FROM user_accessible_groups)));


CREATE TRIGGER add_user_to_group_after_insert AFTER INSERT ON public."group" FOR EACH ROW EXECUTE FUNCTION add_creator_to_user_group();


