create table "public"."rules" (
    "id" bigint generated by default as identity not null,
    "plan_id" bigint not null,
    "questboards_allowed" bigint not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."rules" enable row level security;

CREATE UNIQUE INDEX rules_pkey ON public.rules USING btree (id);

CREATE UNIQUE INDEX rules_plan_id_key ON public.rules USING btree (plan_id);

alter table "public"."rules" add constraint "rules_pkey" PRIMARY KEY using index "rules_pkey";

alter table "public"."rules" add constraint "rules_plan_id_fkey" FOREIGN KEY (plan_id) REFERENCES plan(id) not valid;

alter table "public"."rules" validate constraint "rules_plan_id_fkey";

alter table "public"."rules" add constraint "rules_plan_id_key" UNIQUE using index "rules_plan_id_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_questboard()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$DECLARE
  selected_plan user_plan%ROWTYPE;
  questboard_count INT;
  questboards_allowed_for_plan INT;
BEGIN
  -- Get current plan of user
  SELECT * 
  INTO selected_plan
  FROM user_plan
  WHERE "user" = auth.uid();

  IF selected_plan IS NULL THEN
    RAISE EXCEPTION 'Error while trying to insert questboard, as plan of user could not be found.' USING ERRCODE = 'P0001';
  END IF;

  -- Count users existing questboards
  SELECT COUNT(*) INTO questboard_count
  FROM questboard_users
  WHERE user_id = auth.uid();
  
  -- If number of questboards < threshold of plan 
  SELECT questboards_allowed INTO questboards_allowed_for_plan
  FROM rules
  WHERE plan_id = selected_plan.plan;

  IF questboards_allowed_for_plan IS NULL THEN
    RAISE EXCEPTION 'Error while trying to insert questboard, as questboards_allowed is null.' USING ERRCODE = 'P0002';
  END IF;

  IF questboard_count >= questboards_allowed_for_plan THEN
    RAISE EXCEPTION 'Number of questboards exceeds current pricing plan. Please change your plan to get more questboards.' USING ERRCODE = 'P0003';
  END IF;

  RETURN NEW;
END;$function$
;

grant delete on table "public"."rules" to "anon";

grant insert on table "public"."rules" to "anon";

grant references on table "public"."rules" to "anon";

grant select on table "public"."rules" to "anon";

grant trigger on table "public"."rules" to "anon";

grant truncate on table "public"."rules" to "anon";

grant update on table "public"."rules" to "anon";

grant delete on table "public"."rules" to "authenticated";

grant insert on table "public"."rules" to "authenticated";

grant references on table "public"."rules" to "authenticated";

grant select on table "public"."rules" to "authenticated";

grant trigger on table "public"."rules" to "authenticated";

grant truncate on table "public"."rules" to "authenticated";

grant update on table "public"."rules" to "authenticated";

grant delete on table "public"."rules" to "service_role";

grant insert on table "public"."rules" to "service_role";

grant references on table "public"."rules" to "service_role";

grant select on table "public"."rules" to "service_role";

grant trigger on table "public"."rules" to "service_role";

grant truncate on table "public"."rules" to "service_role";

grant update on table "public"."rules" to "service_role";

CREATE TRIGGER on_questboard_insert BEFORE INSERT ON public.questboard FOR EACH ROW EXECUTE FUNCTION handle_new_questboard();


